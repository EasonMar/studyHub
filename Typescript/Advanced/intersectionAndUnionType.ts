interface A {
    name: string
    age: number
}

interface B {
    name: number
    id: string
}


// ========================================================================
// ============================ 交叉类型 ============================
// 交叉类型的理解就是类型交集产生出的新的类型，并且这个类型「包含参与交集的类型的所有属性」。
// 注意：新的类型 拥有 参与交集 类型的所有属性...
// ========================================================================
// 当我们使用交叉类型读取属性，可以获取所有类型的所有属性名，赋值的时候需要满足所有类型的结构
// ========================================================================
type Intersection = A & B
const cInter: Intersection = {
    age: 4,
    id: '4',
    name // 注意，非常重要，当我们交叉的类型中含有相同属性名但属性类型不一样的情况，该属性会成为never类型
}



// ========================================================================
// ============================ 联合类型 ============================
// 联合类型的理解就是类型并集之后产生的一个垃圾桶，所有参与并集的类型都像垃圾桶中的垃圾，
// 当我们使用联合类型的时候，就像垃圾桶里捡垃圾，要么捡起来的是蓝色物体，要么就是红色物体。
// ========================================================================
// 当我们使用联合类型赋值的时候，数据结构只能选择满足形如A或者形如B
// 当我们使用联合类型读取属性的时候，只能获取其共同的属性.如果访问的是非共同的属性，必须做好类型保护以防止bug
// ========================================================================
type Union = A | B;
const cUnion: Union = {
    name: 'cname',
    age: 1
}



// 总结：
// & - 交叉类型：产生一个包含所有属性的新类型。 
// | - 联合类型：产生一个包含所有类型的选择集类型。